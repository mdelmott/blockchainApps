var request = require('request-promise');

module.exports = class Chaincode {
    constructor(peerUrl, chaincodePath, initArgs) {
	this.peerUrl = peerUrl;
	this.chaincodePath = chaincodePath;
	this.initArgs = initArgs;
	this.chaincodeId = '';

    }


    deploy() {
	return request({
	    method:'POST',
	    url:this.peerUrl + '/chaincode',
	    json:true,
	    body: {
		"jsonrpc": "2.0",
		"method": "deploy",
		"params": {
		    "type": 1,
		    "chaincodeID":{
			"path":this.chaincodePath
		    },
		    "ctorMsg": {
			"function":"init",
			"args":this.initArgs
		    }
		},
		"id": 1
	    }
	}).then((response) => {
	    this.chaincodeId = response.result.message;
	    console.log('chaincode deployed. new chaincodeId: %s', this.chaincodeId);
	}).catch((error) => {
	    console.log('deployed has failed. See error below');
	    console.log(error.message);
	});
    }


    get query() {
	return new Proxy({}, {
	    get: (target, name) => {
		return () => {
		    var argsArray = Array.prototype.slice.call(arguments);
		    console.log('calling query function %s, with arguments %s', name, argsArray);

		    return request({
			method:'POST',
			url:this.peerUrl + '/chaincode',
			json:true,
			body: {
			    "jsonrpc": "2.0",
			    "method": "query",
			    "params": {
				"type": 1,
				"chaincodeID":{
				    "name":this.chaincodeId
				},
				"ctorMsg": {
				    "function":name,
				    "args":argsArray
				}
			    },
			    "id": 1
			}
		    }).then((response) => {
			console.log('query function called. response :%s', response);
			return response;
		    }).catch((error) => {
			console.log('query has failed. See error below');
			console.log(error.message);
		    });

		}
	    }
	});
    }

    invoke() {
    }

};
