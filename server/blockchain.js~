var Blockchain = require('ibm-blockchain-js');
var blockchain = new Blockchain(/*logger*/);             //you can pass a logger
//such as winston here - optional
var chaincode = {};

var options =   {
    network:{
	peers:   [{
	    "api_host": "localhost",
	    "api_port": 17050,
	    "api_port_tls": 17054,
	    "id": "vp1"
	}],
	users:  [],
	options: {                          //this is optional
	    quiet: true,
	    timeout: 60000
	}
    },
    chaincode:{
	zip_url:
	'https://github.com/ibm-blockchain/marbles-chaincode/archive/master.zip',
	unzip_dir: 'marbles-chaincode-master/part2_v1.0.0',
	git_url:
	'https://github.com/ibm-blockchain/marbles-chaincode/part2_v1.0.0'
    }
};

// Step 2 ==================================
ibc.load(options, cb_ready);

// Step 3 ==================================
function cb_ready(err, cc){                             //response has
    //chaincode functions
    app1.setup(ibc, cc);
    app2.setup(ibc, cc);

    // Step 4 ==================================
    if(cc.details.deployed_name === ""){                //decide if I
	//need to deploy or not
	cc.deploy('init', ['99'], null, cb_deployed);
    }
    else{
	console.log('chaincode summary file indicates chaincode has
been previously deployed');
	cb_deployed();
    }
}

// Step 5 ==================================
function cb_deployed(err){
    console.log('sdk has deployed code and waited');
    chaincode.query.read(['a']);
}
